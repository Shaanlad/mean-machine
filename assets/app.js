angular.module("app",["ngRoute"]),angular.module("app").controller("ApplicationCtrl",["$scope","$rootScope",function(o,e){o.$on("login",function(t,n){o.currentUser=n,e.currentUser=n,localStorage.setItem("logged_user",e.currentUser.username)})}]),angular.module("app").controller("ErrorCtrl",["$scope","$rootScope",function(o,e){o.hello="this is from the controller hello",console.log(o.hello)}]),angular.module("app").controller("HomeCtrl",["$scope","$rootScope",function(o,e){o.hello="this is from the controller hello",console.log(e.currentUser),o.name=localStorage.getItem("logged_user"),console.log(o.name)}]),angular.module("app").controller("LoginCtrl",["$scope","UserSvc","$location",function(o,e,t){o.login=function(n,r){e.login(n,r).then(function(e){console.log("printing response"),console.log(e.data),o.$emit("login",e.data),t.path("/home")})}}]),angular.module("app").controller("PostsCtrl",["$scope","PostsSvc",function(o,e){e.fetch().success(function(e){o.posts=e}),o.addPost=function(){o.postBody&&e.create({body:o.postBody}).success(function(e){o.postBody=null})},o.$on("ws:new_post",function(e,t){o.$apply(function(){o.posts.unshift(t)})})}]),angular.module("app").service("PostsSvc",["$http",function(o){this.fetch=function(){return o.get("/api/posts")},this.create=function(e){return o.post("/api/posts",e)}}]),angular.module("app").controller("RegisterCtrl",["$scope","UserSvc","$location",function(o,e,t){o.register=function(n,r,l){e.register(n,r,l).then(function(e){o.$emit("login",e.data),t.path("/home")})["catch"](function(o){console.log(o)})}}]),angular.module("app").config(["$routeProvider",function(o){o.when("/",{controller:"LoginCtrl",templateUrl:"login.html"}).when("/posts",{controller:"PostsCtrl",templateUrl:"posts.html"}).when("/register",{controller:"RegisterCtrl",templateUrl:"register.html"}).when("/home",{controller:"HomeCtrl",templateUrl:"users/home.html"}).when("/vehicles/new/info",{controller:"VehiclesCtrl",templateUrl:"vehicles/new/info.html"}).when("/401",{controller:"ErrorCtrl",templateUrl:"errors/401.html"})}]),angular.module("app").service("UserSvc",["$http","$window","$location",function(o,e,t){var n=this;n.getUser=function(){return o.get("api/users")},n.login=function(r,l){return o.post("api/sessions",{username:r,password:l}).then(function(t){return n.token=t.data,e.sessionStorage.user_token=JSON.stringify(n.token),o.defaults.headers.common["x-auth"]=t.data,n.getUser()})["catch"](function(o){console.error("Gists error",o.status,o.data),t.path("/401")})["finally"](function(){console.log("finally finished gists")})},n.register=function(e,t,r){return o.post("api/users",{name:e,username:t,password:r}).then(function(o){return n.login(t,r)})}}]),angular.module("app").run(["$rootScope","$timeout",function(o,e){!function t(){var n="ws://localhost:3000",r=new WebSocket(n);r.onclose=function(o){console.log("WebSocket Disconnected......"),e(t,1e4)},r.onmessage=function(e){console.log(e);var t=JSON.parse(e.data);o.$broadcast("ws:"+t.topic,t.data)}}()}]),angular.module("app").controller("VehiclesCtrl",["$scope","$http",function(o,e){o.saveVehicleDetails=function(){console.log("in controller 2"),console.log(o.dev_id+o.v_number),e.post("/api/vehicle",{dev_id:o.dev_id,v_number:o.v_number}).then(function(o){console.log(o)},function(o){})}}]);
//# sourceMappingURL=data:application/json;base64,